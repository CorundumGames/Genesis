name: Publish Nuget Package for Genesis Plugins

on:
  push:
    # Attempt to create a new nuget package anytime code changes for the external app.
    branches: [ develop ]
    paths:
    - 'ExternalApp/**/*.cs'
    - '.github/workflows/publish_nuget.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # Always check out develop so our GitVersion task will complete when building the External App Solution
    # and ensure fetch-depth is zero to avoid errors with GitVersion
    - uses: actions/checkout@v2
      with:
        ref: develop
        fetch-depth: 0

    # Execute GitVersion
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.4
      with:
        versionSpec: '5.3.x'
    - name: Use GitVersion
      run: |
        dotnet-gitversion /home/runner/work/Genesis/Genesis /output json /output buildserver /nonormalize /config GitVersion.yml /targetpath ExternalApp /updateassemblyinfo /ensureassemblyinfo /diag
        dotnet-gitversion /home/runner/work/Genesis/Genesis /output json /output buildserver /nonormalize /config GitVersion.yml /targetpath Unity/Assets /updateassemblyinfo /ensureassemblyinfo /diag

    # Install the .Net Core dependency
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.*

    # Run Unit Tests for External App Solution
    - name: Build Genesis.CLI .Net Core Console App
      run: dotnet build './ExternalApp/Genesis/Genesis.sln' -c Debug --nologo
    - name: Run .Net Core Unit Tests
      run: dotnet test './ExternalApp/Genesis/Genesis.sln' --no-build --filter "TestCategory!=CodeAnalysis" --verbosity normal

    # Zip published app and write zip to Unity project, and check in build contents on develop
    - name: 'Create Zip for Genesis.CLI'
      uses: vimtor/action-zip@v1
      with:
        files: './Publish/'
        dest: './Unity/Assets/JCMG/Genesis/External/Genesis.CLI.zip'

    # Create and Publish Nuget package for Genesis.Plugin.Base
    - name: Create Nuget Package for Genesis.Plugin
      run: dotnet pack './ExternalApp/Genesis.Plugin/Genesis.Plugin.csproj'  -c Release --nologo -p:PackageVersion=$GitVersion_SemVer
    - name: Publish Nuget Package for Genesis.Plugin
      run: dotnet nuget push ExternalApp/Genesis.Plugin/bin/Release/**/*.nupkg --skip-duplicate --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json

    # Check in Unity Package on Release branch
    - name: Add & Commit Release Changes
      uses: EndBug/add-and-commit@v5.1.0
      env:
        # This is necessary in order to push a commit to the repo
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Leave this line unchanged
      with:
        author_name: Github Action Bot
        message: 'Auto-updated ExternalApp Zip contents'

    # Tag commit just made with new Nuget package version
    - name: Create Tag
      run: |
        git tag -a 'nuget/$GitVersion_SemVer' -m 'Genesis.Plugin $GitVersion_SemVer Nuget Package'
        git push origin --tags
