name: Genesis Continous Deployment

on:
  push:
    # Attempt to create a new nuget package and Unity release anytime code changes.
    branches: [ develop ]
    paths:
    - '.github/workflows/publish_releases.yml'
    - 'Unity/Assets/JCMG/Genesis/Scripts/**/*.cs'
    - 'ExternalApp/**/*.cs'
    - 'ExternalApp/**/*.cproj'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    ### Manage Dependencies

    # Check out Develop and Release so we can build and perform unit tests on the external solution, Unity
    # Always check out develop so our GitVersion task will complete when building the external solution
    # and ensure fetch-depth is zero to avoid errors with GitVersion
    - uses: actions/checkout@v2
      with:
        ref: 'develop'
        path: './Genesis'
        fetch-depth: 0
    - uses: actions/checkout@v2
      with:
        ref: 'release/stable'
        path: './Genesis-Release'
        fetch-depth: 0

    # Install the .Net Core dependency
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.*

    # Install GitVersion
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'

    ## Install & Execute GitVersion
    - name: Use GitVersion
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      run: |
        dotnet-gitversion Genesis /config GitVersion.yml /output buildserver /nonormalize /updateassemblyinfo /ensureassemblyinfo /diag /verbosity Diagnostic

    ### Build solutions and run Unit Tests

    # Build and Run Unit Tests for External App Solution
    - name: Run Genesis.CLI Unit Tests
      run: dotnet test './Genesis/ExternalApp/Genesis/Genesis.sln' --filter "TestCategory!=CodeAnalysis" --verbosity n --nologo
    - name: Build Genesis.CLI solution
      run: dotnet build './Genesis/ExternalApp/Genesis/Genesis.sln' -c Release --nologo

    # Retrieve cache for Unity project
    - name: Retrieve Unity Library Cache
      uses: actions/cache@v1.1.0
      with:
        path: './Genesis/Unity/Library'
        key: Library-Genesis-Windows
        restore-keys: |
          Library-Genesis

    # Execute Unity Unit Tests and Upload results
    - name: Run Unity Unit Tests
      uses: game-ci/unity-test-runner@v2.0-alpha-3
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      with:
        projectPath: './Genesis/Unity'
        unityVersion: 2019.4.20f1

    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v1
      with:
        name: Test results
        path: artifacts

    ### Upload or check in release content

    # Zip published app and write zip to Unity project
    - name: 'Create Zip for Genesis.CLI'
      uses: vimtor/action-zip@v1
      with:
        files: './Genesis/Publish/'
        dest: './Genesis/Unity/Assets/JCMG/Genesis/External/Genesis.CLI.zip'

    # Copy changelog file to Unity package contents
    - name: Copy Changelog to Unity Package
      run: |
        cp ./Genesis/CHANGELOG.MD ./Genesis/Unity/Assets/JCMG/Genesis/CHANGELOG.MD

    # Build Unity Package on Develop branch
    - name: Execute Unity Package Build
      uses: game-ci/unity-builder@v2.0-alpha-6
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      with:
        projectPath: './Genesis/Unity'
        unityVersion: 2019.4.20f1
        buildMethod: 'JCMG.PackageTools.Editor.PackageToolsCI.Generate'
        allowDirtyBuild: true
        customParameters: version=${{ env.GitVersion_MajorMinorPatch }} GenerateVersionConstants=true

    # Check build contents on develop branch
    - name: Add & Commit Release Changes
      uses: EndBug/add-and-commit@v5.1.0
      env:
        # This is necessary in order to push a commit to the repo
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        cwd: './Genesis'
        author_name: Github Action Bot
        message: 'Auto-updated ExternalApp Zip contents for v${{ env.GitVersion_MajorMinorPatch }}'        

    # Check in Unity Package on Release branch
    - name: Add & Commit Release Changes
      uses: EndBug/add-and-commit@v5.1.0
      env:
        # This is necessary in order to push a commit to the repo
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        author_name: Github Action Bot
        cwd: './Genesis-Release'
        branch: 'release/stable'
        message: 'v${{ env.GitVersion_MajorMinorPatch }}'

    # Create and Publish Nuget package for Genesis.Shared.Base
    - name: Create Nuget Package for Genesis.Shared
      run: dotnet pack ./Genesis/ExternalApp/Genesis.Shared/Genesis.Shared.csproj  -c Release --nologo -p:PackageVersion=${{ env.GitVersion_MajorMinorPatch }}
    - name: Publish Nuget Package for Genesis.Shared
      run: dotnet nuget push ./Genesis/ExternalApp/Genesis.Shared/bin/Release/**/*.nupkg --skip-duplicate --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json

    # Create and Publish Nuget package for Genesis.Plugin.Base
    - name: Create Nuget Package for Genesis.Plugin
      run: dotnet pack ./Genesis/ExternalApp/Genesis.Plugin/Genesis.Plugin.csproj  -c Release --nologo -p:PackageVersion=${{ env.GitVersion_MajorMinorPatch }}
    - name: Publish Nuget Package for Genesis.Plugin
      run: dotnet nuget push ./Genesis/ExternalApp/Genesis.Plugin/bin/Release/**/*.nupkg --skip-duplicate --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json

    # Tag commit just made with new Nuget package version and push it to remote
    - name: Create Tag
      run: |
        cd './Genesis'
        git config --global user.email "mirraraenn@gmail.com"
        git config --global user.name "Github Action Bot"
        git tag -a "nuget/v${{ env.GitVersion_MajorMinorPatch }}" -m "v${{ env.GitVersion_MajorMinorPatch }} Nuget Package"        
        git tag -a "v${{ env.GitVersion_MajorMinorPatch }}" -m "v${{ env.GitVersion_MajorMinorPatch }}"
        git push origin --tags

    # Tag commit just made with new Unity package version and push it to remote
    - name: Create Tag
      run: |
        cd './Genesis-Release'
        git config --global user.email "mirraraenn@gmail.com"
        git config --global user.name "Github Action Bot"
        git tag -a "upm/v${{ env.GitVersion_MajorMinorPatch }}" -m "v${{ env.GitVersion_MajorMinorPatch }}"
        git push origin --tags

    # Create release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: 'v${{ env.GitVersion_MajorMinorPatch }}'
        draft: false
        prerelease: false
        files: |
          /Genesis/Builds/*.unityPackage
          /Genesis/Unity/Assets/JCMG/Genesis/External/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
